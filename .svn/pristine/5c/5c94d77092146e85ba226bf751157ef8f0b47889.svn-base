package com.maryun.controller.system.dictionaries;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.maryun.controller.base.BaseController;
import com.maryun.model.PageData;

/**
 * 
 * @ClassName: DictionariesController
 * @Description: TODO
 * @author "PangLin"
 * @date 2015年11月26日 下午4:52:29
 *
 */
@Controller
@RequestMapping("/dic")
public class DictionariesController extends BaseController {
	String menuUrl = "dic/listDics"; // 菜单地址(权限用)

	// @Resource(name="dictionariesService")
	// private DictionariesService dictionariesService;
	//
	@RequestMapping(value = "/listDics")
	public ModelAndView listDics() {
		ModelAndView mv = this.getModelAndView();
		mv.setViewName("system/dictionaries/dic_list");
		return mv;
	}

	//
	@RequestMapping(value = "/getTree")
	@ResponseBody
	public Object getDicTree() throws Exception {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/getTree", pd);
	}

	//
	@RequestMapping(value = "/toAdd")
	public ModelAndView toAdd() {
		ModelAndView mv = this.getModelAndView();
		PageData pd = this.getPageData();
		mv.addObject("pid", pd.getString("pid"));
		mv.addObject("p_code", pd.getString("pcode"));
		mv.addObject("levels", Integer.parseInt(pd.getString("plevels")) + 1);
		mv.setViewName("system/dictionaries/dic_add");
		return mv;
	}

	//
	@RequestMapping(value = "/toEdit")
	public ModelAndView toEdit() throws Exception {
		PageData pd = this.getPageData();
		return this.viewAndPd("system/dictionaries/dic_edit", systemServer + "dic/toEdit", pd);
	}

	//
	@RequestMapping(value = "/saveAdd")
	@ResponseBody
	public Object saveAdd() throws Exception {
		PageData pd = this.getPageData();
		this.savePage(pd);
		return this.pd(systemServer + "dic/saveAdd", pd);
	}

	//
	@RequestMapping(value = "/saveEdit")
	@ResponseBody
	public Object saveEdit() throws Exception {
		PageData pd = this.getPageData();
		this.updatePage(pd);
		return this.pd(systemServer + "dic/saveEdit", pd);
	}

	//
	@RequestMapping(value = "/delete")
	@ResponseBody
	public Object delete() {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/delete", pd);
	}

	//
	@RequestMapping(value = "/getSubTree")
	@ResponseBody
	public Object getSubTree() throws Exception {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/getSubTree", pd);
	}

	//
	/**
	 * 在新增子节点前判断父节点的code是否与其他节点存在重复，如果存在重复则无法进行缓存
	 * 
	 * @return
	 */
	@RequestMapping(value = "/hasSameCode")
	@ResponseBody
	public Object hasSameCode() {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/hasSameCode", pd);
	}

	/**
	 * 判断当前节点是否有子节点
	 * 
	 * @return
	 */
	@RequestMapping(value = "/hasChild")
	@ResponseBody
	public Object hasChild() {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/hasChild", pd);
	}

	/**
	 * 根据数据字典code获取数据字典，不包含{}
	 * 
	 * @return
	 */
	@RequestMapping(value = "/getDicByCode")
	@ResponseBody
	public Object getDicByCode() {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/getDicByCode", pd);
	}

	/**
	 * 根据数据字典code,获取当前Code下属所有子类
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getDicForSelect")
	@ResponseBody
	public Object getDicForSelect() throws Exception {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/getDicForSelect", pd);
	}
	
	/**
	 * 根据全国行政地区数据字典code,获取当前Code下属所有子类
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getDicAreaForSelect")
	@ResponseBody
	public Object getDicAreaForSelect() throws Exception {
		PageData pd = this.getPageData();
		return this.pd(systemServer + "dic/getDicAreaForSelect", pd);
	}

}
